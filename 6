#include <stdio.h>  
#include <ctype.h>  
#include <string.h>  
#include <stdlib.h>  

void encrypt() {  
    char plaintext[128];  
    char key[16];  
    printf("\nEnter the plaintext (up to 128 characters): ");  
    scanf(" %[^\n]", plaintext); // Read input with spaces  
    printf("Enter the key (up to 16 characters): ");  
    scanf(" %[^\n]", key);  

    printf("Cipher Text: ");  
    for (int i = 0, j = 0; i < strlen(plaintext); i++, j++) {  
        if (j >= strlen(key)) {  
            j = 0;  
        }  
        int shift = toupper(key[j]) - 'A';  
        char encryptedChar = ((toupper(plaintext[i]) - 'A' + shift) % 26) + 'A';  
        printf("%c", encryptedChar);  
    }  
    printf("\n");  
}  

void decrypt() {  
    char ciphertext[128];  
    char key[16];  
    printf("\nEnter the ciphertext: ");  
    scanf(" %[^\n]", ciphertext);  
    printf("Enter the key: ");  
    scanf(" %[^\n]", key);  

    printf("Deciphered Text: ");  
    for (int i = 0, j = 0; i < strlen(ciphertext); i++, j++) {  
        if (j >= strlen(key)) {  
            j = 0;  
        }  
        int shift = toupper(key[j]) - 'A';  
        char decryptedChar = ((toupper(ciphertext[i]) - 'A' - shift + 26) % 26) + 'A';  
        printf("%c", decryptedChar);  
    }  
    printf("\n");  
}  

int main() {  
    int option;  
    while (1) {  
        printf("\n1. Encrypt");  
        printf("\n2. Decrypt");  
        printf("\n3. Exit\n");  
        printf("\nEnter your option: ");  
        scanf("%d", &option);  

        switch (option) {  
            case 1:  
                encrypt();  
                break;  
            case 2:  
                decrypt();  
                break;  
            case 3:  
                exit(0);  
            default:  
                printf("\nInvalid selection! Try again.\n");  
                break;  
        }  
    }  
    return 0;  
}  
 Binary file addedBIN +131 KB 
CNS-04.exe
Binary file not shown.
 77 changes: 77 additions & 0 deletions77  
CNS-05.cpp
@@ -0,0 +1,77 @@
#include<stdio.h>
#include<string.h>

void encryptMsg(char msg[], int key){
    int msgLen = strlen(msg), i, j, k = -1, row = 0, col = 0;
    char railMatrix[key][msgLen];

    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            railMatrix[i][j] = '\n';

    for(i = 0; i < msgLen; ++i){
        railMatrix[row][col++] = msg[i];

        if(row == 0 || row == key-1)
            k= k * (-1);

        row = row + k;
    }

    printf("\nEncrypted Message: ");

    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            if(railMatrix[i][j] != '\n')
                printf("%c", railMatrix[i][j]);
}

void decryptMsg(char enMsg[], int key){
    int msgLen = strlen(enMsg), i, j, k = -1, row = 0, col = 0, m = 0;
    char railMatrix[key][msgLen];

    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            railMatrix[i][j] = '\n';

    for(i = 0; i < msgLen; ++i){
        railMatrix[row][col++] = '*';

        if(row == 0 || row == key-1)
            k= k * (-1);

        row = row + k;
    }

    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            if(railMatrix[i][j] == '*')
                railMatrix[i][j] = enMsg[m++];

    row = col = 0;
    k = -1;

    printf("\nDecrypted Message: ");

    for(i = 0; i < msgLen; ++i){
        printf("%c", railMatrix[row][col++]);

        if(row == 0 || row == key-1)
            k= k * (-1);

        row = row + k;
    }
}

int main(){
    char msg[] = "Hello World";
    char enMsg[] = "Horel ollWd";
    int key = 3;

    printf("Original Message: %s", msg);

    encryptMsg(msg, key);
    decryptMsg(enMsg, key);

    return 0;
}
 Binary file addedBIN +130 KB 
CNS-05.exe
Binary file not shown.
 65 changes: 65 additions & 0 deletions65  
CNS-06.cpp
@@ -0,0 +1,65 @@
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to remove spaces from a string
void removeSpaces(char *str) {
    int count = 0;
    for (int i = 0; str[i]; i++) {
        if (str[i] != ' ')
            str[count++] = str[i];
    }
    str[count] = '\0';
}

// Function to perform row-column transposition
void rowColumnTransposition(char *plaintext, int key) {
    int length = strlen(plaintext);
    int rows = length / key;
    if (length % key != 0)
        rows++;

    char matrix[rows][key];

    // Initialize matrix with spaces
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < key; j++) {
            matrix[i][j] = ' ';
        }
    }

    int k = 0;
    // Fill the matrix row-wise with the plaintext
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < key && k < length; j++) {
            matrix[i][j] = plaintext[k++];
        }
    }

    // Print the matrix column-wise
    printf("Encrypted Message: ");
    for (int j = 0; j < key; j++) {
        for (int i = 0; i < rows; i++) {
            if (matrix[i][j] != ' ')
                printf("%c", matrix[i][j]);
        }
    }
    printf("\n");
}

int main() {
    char plaintext[1000];
    int key;

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    removeSpaces(plaintext);

    printf("Enter the key (number of columns): ");
    scanf("%d", &key);

    rowColumnTransposition(plaintext, key);

    return 0;
}
